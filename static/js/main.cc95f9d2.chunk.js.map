{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","orders","setOrders","hairTypes","setHairTypes","output","setOutput","csvOptions","bom","columns","getProductOption","hairType","long","formula","className","onClick","e","console","log","type","id","accept","onChange","file","fileReader","FileReader","onload","csv","parse","result","err","data","readAsBinaryString","onOrdersChange","target","files","onHairChange","map","order","itemOptions","find","stringify","header","Object","keys","FileSaver","Blob","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,sMC+H5BC,MAxHf,WAAgB,IAAD,EACeC,mBAAS,MADxB,mBACNC,EADM,KACEC,EADF,OAEqBF,mBAAS,MAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGeJ,mBAAS,MAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAKPC,EAAa,CACjBC,KAAK,EACLC,SAAS,GAGLC,EAAmB,SAACC,GACxB,GAAIA,EAAU,CACZ,IAAMC,EAAmC,SAA5BD,EAAS,eAA4B,OAAS,GACrDE,EAAUF,EAAS,aACzB,MAAgB,UAAZE,EACKD,EAAOC,EAETA,EAGT,MAAO,QAkET,OACE,yBAAKC,UAAU,OACb,6BACE,wBAAIC,QAAS,SAACC,GAAD,OAAOC,QAAQC,IAAIjB,KAAhC,UACA,2BACEkB,KAAK,OACLC,GAAG,OACHC,OAAO,OACPC,SAAU,SAACN,GAAD,OAvEK,SAACO,GACtB,IAAIC,EAAa,IAAIC,WACrBD,EAAWE,OAAS,WAClBC,IAAIC,MAAMJ,EAAWK,OAAQtB,GAAY,SAACuB,EAAKC,GAC7C7B,EAAU6B,OAIdP,EAAWQ,mBAAmBT,GA+DPU,CAAejB,EAAEkB,OAAOC,MAAM,QAGnD,6BACE,wBAAIpB,QAAS,SAACC,GAAD,OAAOC,QAAQC,IAAIf,KAAhC,aACA,2BACEgB,KAAK,OACLC,GAAG,OACHC,OAAO,OACPC,SAAU,SAACN,GAAD,OArEG,SAACO,GACpB,IAAIC,EAAa,IAAIC,WACrBD,EAAWE,OAAS,WAClBC,IAAIC,MAAMJ,EAAWK,OAAQtB,GAAY,SAACuB,EAAKC,GAC7C3B,EAAa2B,OAIjBP,EAAWQ,mBAAmBT,GA6DPa,CAAapB,EAAEkB,OAAOC,MAAM,QAGjD,4BAAQpB,QAAS,SAACC,GA5DpBV,EACEL,EAAOoC,KAAI,SAACC,GACV,OAAO,2BACFA,GADL,IAEEC,YAAa7B,EACXP,EAAUqC,MACR,SAAC7B,GAAD,OAAcA,EAAS,iBAAmB2B,EAAM,mCAsDxD,sBACA,4BAAQvB,QAAS,SAACC,GA9CpBW,IAAIc,UACFpC,EACA,CAAEqC,QAAQ,EAAMjC,QAASkC,OAAOC,KAAKvC,EAAO,MAC5C,SAACyB,EAAKC,GACJd,QAAQC,IAAIa,GACZc,SACE,IAAIC,KAAK,CAACf,GAAO,CACfZ,KAAM,2BAER,mBAqCJ,UACA,4BAAQJ,QAAS,SAACC,GAAD,OAAOC,QAAQC,IAAIb,KAApC,gBAEA,4BAAQU,QAAS,SAACC,GAAD,OAAOC,QAAQC,IAAIf,EAAU,GAAG,mBAAjD,sBAGA,4BAAQY,QAAS,SAACC,GAAD,OAAOC,QAAQC,IAAIjB,EAAO,GAAG,0BAA9C,mBC5Gc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.cc95f9d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport csv from 'csv';\nimport * as FileSaver from 'file-saver';\n\nfunction App() {\n  const [orders, setOrders] = useState(null);\n  const [hairTypes, setHairTypes] = useState(null);\n  const [output, setOutput] = useState(null);\n\n  const csvOptions = {\n    bom: true,\n    columns: true,\n  };\n\n  const getProductOption = (hairType) => {\n    if (hairType) {\n      const long = hairType['Hair Length'] === 'long' ? 'long' : '';\n      const formula = hairType['Hair Type'];\n      if (formula === 'ultra') {\n        return long + formula;\n      }\n      return formula;\n    }\n\n    return 'none';\n  };\n\n  const onOrdersChange = (file) => {\n    let fileReader = new FileReader();\n    fileReader.onload = () => {\n      csv.parse(fileReader.result, csvOptions, (err, data) => {\n        setOrders(data);\n        //setOrders(mapReduce(data));\n      });\n    };\n    fileReader.readAsBinaryString(file);\n  };\n\n  const onHairChange = (file) => {\n    let fileReader = new FileReader();\n    fileReader.onload = () => {\n      csv.parse(fileReader.result, csvOptions, (err, data) => {\n        setHairTypes(data);\n        //setOrders(mapReduce(data));\n      });\n    };\n    fileReader.readAsBinaryString(file);\n  };\n\n  const addHairToOrders = () => {\n    setOutput(\n      orders.map((order) => {\n        return {\n          ...order,\n          itemOptions: getProductOption(\n            hairTypes.find(\n              (hairType) => hairType['Order Number'] == order['ï»¿Order #']\n            )\n          ),\n        };\n      })\n    );\n  };\n\n  const onOutput = () => {\n    csv.stringify(\n      output,\n      { header: true, columns: Object.keys(output[0]) },\n      (err, data) => {\n        console.log(data);\n        FileSaver.saveAs(\n          new Blob([data], {\n            type: 'text/csv;charset=utf-8',\n          }),\n          'output.csv'\n        );\n      }\n    );\n  };\n\n  const mapReduce = (data) => {\n    let keys = data.shift();\n    return data.map((row) => {\n      return keys.reduce((obj, key, i) => {\n        obj[key] = row[i];\n        return obj;\n      }, {});\n    });\n  };\n\n  return (\n    <div className='App'>\n      <div>\n        <h2 onClick={(e) => console.log(orders)}>Orders</h2>\n        <input\n          type='file'\n          id='file'\n          accept='.csv'\n          onChange={(e) => onOrdersChange(e.target.files[0])}\n        />\n      </div>\n      <div>\n        <h2 onClick={(e) => console.log(hairTypes)}>Hair_type</h2>\n        <input\n          type='file'\n          id='file'\n          accept='.csv'\n          onChange={(e) => onHairChange(e.target.files[0])}\n        />\n      </div>\n      <button onClick={(e) => addHairToOrders()}>Add Hair to Orders</button>\n      <button onClick={(e) => onOutput()}>Output</button>\n      <button onClick={(e) => console.log(output)}> View Output</button>\n\n      <button onClick={(e) => console.log(hairTypes[0]['Order Number'])}>\n        test hair types id\n      </button>\n      <button onClick={(e) => console.log(orders[0]['ï»¿Order #'])}>\n        test order id\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}